
(defun readline:read-line (&key (prompt "") (stream (io:default-stream)))
   (let ((characters-left  '())
         (characters-right '()))
      (while t
         (vt100:clear-full-line stream)
         (vt100:jump-to-beginning-of-line stream)
         (princ prompt stream)
         (dolist (char (reverse characters-left))
            (write-char char stream))
         (dolist (char characters-right)
            (write-char char stream))
         (vt100:jump-to-line-pos (+ 1 (length prompt) (length characters-left)) stream)
         (let ((char (read-char stream)))
            (case char
               ((#\Newline)   (return (conversions:->string (append (reverse characters-left) characters-right))))
               ((#\Left)      (when characters-left  (push (pop characters-left)  characters-right)))
               ((#\Right)     (when characters-right (push (pop characters-right) characters-left)))
               ((#\Backspace) (when characters-left  (pop characters-left)))
               ((#\Home)      (setf characters-right (append (reverse characters-left) characters-right))
                              (setf characters-left  '()))
               ((#\End)       (setf characters-left  (append (reverse characters-right) characters-left))
                              (setf characters-right '()))
               (t (push char characters-left)))))))
